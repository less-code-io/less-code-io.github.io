{"version":3,"sources":["webpack:///./node_modules/mxgraph/javascript/dist/build.js","webpack:///./src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.vue?83c4","webpack:///./src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.hook.js","webpack:///src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.vue","webpack:///./src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.vue?f959","webpack:///./src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.vue","webpack:///./src/DesignSystem/Pages/Editor/EditorPage/SchemaEditorOrganism/SchemaEditorOrganism.vue?66d9"],"names":["this","opts","name","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","test","window","HTMLElement","p","toString","safari","pushNotification","IS_ANDROID","appVersion","IS_IOS","platform","IOS_VERSION","v","length","parseInt","IS_GC","vendor","IS_CHROMEAPP","chrome","app","runtime","IS_FF","InstallTrigger","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","IS_MAC","IS_CHROMEOS","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","head","getElementsByTagName","appendChild","loadResources","fn","lan","pending","callback","i","mxResources","add","include","src","IOS","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","node","type","styleSheet","cssText","createStyleSheet","module","exports","undefined","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","ltrim","idx2","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","importNodeImplementation","newNode","attributes","createTextNode","nodeValue","createXmlDocument","implementation","createDocument","createMsXmlDocument","ActiveXObject","async","validateOnParse","resolveExternals","parseXml","DOMParser","xml","parser","parseFromString","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","removeWhitespace","before","previousSibling","NODETYPE_TEXT","next","getTextContent","htmlEntities","s","newline","String","isVml","tagUrn","getXml","linefeed","getPrettyXml","XMLSerializer","xmlSerializer","serializeToString","tab","indent","ns","namespaceURI","NODETYPE_DOCUMENT","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_COMMENT","attrs","val","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","serializer","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","headers","setRequestHeaders","request","setRequestHeader","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","fontStyle","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","FONT_BOLD","fontWeight","FONT_ITALIC","txtDecor","FONT_UNDERLINE","FONT_STRIKETHROUGH","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","enc","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","posterWidth","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_DOCUMENTTYPE","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_CENTER","ALIGN_MIDDLE","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","ctrlKey","deltaY","deltaX","diff","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","delta","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","now","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","getAlternateText","fo","createAlternateContent","anchor","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","div2","div3","updateText","updateTextNodes","addForeignObject","group","g","createCss","getTextCss","flex","block","box","yp","bg","ofl","fw","fh","bgc","lh","css","deco","plainText","createClip","updateFont","textHeight","addTextBackground","bbox","getBBox","ie","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","margin","inner","wordWrap","rot","maxHeight","real_cos","real_sin","sizeDiv","oh","top_fix","left_fix","divParent","textpathok","tp","on","horizontal","vertical","guideX","guideY","rounded","tolerance","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","tt","overrideX","stateX","valueX","overrideY","stateY","valueY","ttX","ttY","middle","snapX","centerAlign","override","getOverlayPane","snapY","snapDelta","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","slice","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","stack","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","realHtml","fmt","getAutoDirection","redrawHtmlShapeWithCss3","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","getContentNode","ow","updateInnerHtml","divs","unrotatedBoundingBox","getHtmlValue","updateValue","bd","enableWrap","maxWidth","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","resizeCell","getConstraint","getCurrentCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","getCellStyle","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","tcx","tcy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","unscaledWidth","unscaledHeight","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","rshape","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","sourceScaled","targetScaled","controlHints","scalePointArray","scaleCellState","lastPushed","hint","pushPoint","lastInx","hints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","sourceBuffer","targetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","cellsResized","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","suspended","updatePreview","updateHint","escapeHandler","refreshHandler","currentDx","currentDy","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","keyHandler","isCloneEvent","isCellsCloneable","isCloneEnabled","cloning","checkPreview","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","zoomGraph","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","ignoreScale","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","markerSize","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","ignoreFn","structureOnly","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","reverse","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","ignoreState","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","ignoreGrid","ignoreHorizontal","ignoreVertical","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","zoomTo","cw","ch","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","isTransparentState","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectGroups","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","detail","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","hit","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","executeLayoutForCells","getCellsForChanges","getAncestorLayout","getCellsForChange","addCellsWithLayout","addDescendantsWithLayout","addAncestorsWithLayout","sorted","layoutCells","bubble","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","handlesVisible","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cellCount","addStates","ignore","opps","isCellMoving","useGuidesForEvent","vector","removeHint","roundLength","livePreviewActive","resetLivePreview","setHighlightColor","remote","updateLivePreview","updatePreviewShape","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","suspend","resume","setHandlesVisible","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","maxScale","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","getRotationHandlePosition","startAngle","atan","startDist","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","updateParentHighlight","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","isCustomHandleVisible","crs","da","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","role","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec","render","_vm","_h","$createElement","_c","_self","staticClass","newEntity","_v","staticRenderFns","SchemaEditorOrganism","vertexRefs","edgeRefs","workspaceBlock","entityBlockProperties","schema","allBlocks","editableId","schemaType","onGlobalEvent","EVENTS","DOCUMENT","BEFORE_SAVE","beforeDocumentSave","ENTITIES_CONNECTED","entitiesConnected","EDITABLE_SWITCHED","editableSwitched","TOOLBAR","CUT","COPY","PASTE","editable","EDITABLE_TYPES","SCHEMA","loadDiagramFromEditable","dest","feildId","edgeId","createRelation","newVertex","uuid","createEntity","vertexObject","graphDefaults","sourceVertexId","destVertexId","edgeObject","updateSelectedEditable","editableObj","vue","openedDocument","editables","find","generateJsonFromDiagram","setOpenedDocument","mxgraphFactory","require","mxFactory","setSelectedBlock","rb","dummyEvent","genericAddRemoveCellArray","cellsDeleting","selectedItems","cellsPasting","updateCustomDataTypes","genericAddRemoveCell","selec","entityClicked","newId","staticCache","localStorage","backend","getBlocks","msgbox","Strings","ERROR_MESSAGES","MESSAGE_SCHEMA_BLOCKS","MSGBOX_TYPE","OK","TITLE_MESSAGE_SCHEMA_BLOCKS","initMxGraph","setGraphStyles","setGraphEvents","finalWidth","setDefaultBlock","workspaceBlockName","entityBlockName","fields","typeData","childVertices","childEdges","outObj","customDataTypes","caption","custom","setCustomDataTypes","AtomicDesign","hook","setBackendNamespace","setElementName","beforeCreate","addEventHandlers","setMxFactory","beforeDestroy","unsubscribeGlobalEvents","resetStore","releaseResources","components","methods","props","computed","panels","selectedResources","component"],"mappings":"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","file":"ide/static/js/chunk-3342a84a.91dd53b9.js","sourcesContent":["(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.1.1.\n\t */\n\tVERSION: '4.1.1',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /constructor/i.test(window.HTMLElement) || (function (p) {\n  \t\treturn p.toString() === \"[object SafariRemoteNotification]\";\n  \t\t})(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification)),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IOS_VERSION\n\t * \n\t * Returns the major version number for iOS devices or 0 if the\n\t * device is not an iOS device.\n\t */\n  \tIOS_VERSION: (function()\n  \t{\n  \t\tif ((/iP(hone|od|ad)/.test(navigator.platform)))\n  \t\t{\n  \t\t\tvar v = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n  \t\t\t\n  \t\t\tif (v != null && v.length > 0)\n  \t\t\t{\n  \t\t\t\treturn parseInt(v[1]);\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\treturn 0;\n  \t})(),\n \n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Detects desktop mode on iPad Pro which should block event handling like iOS 12.\n */\nif (mxClient.IS_SF && mxClient.IS_TOUCH && !mxClient.IS_IOS)\n{\n\tmxClient.IOS_VERSION = 13;\n\tmxClient.IOS = true;\n}\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(mxUtils.trim(value), false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar delta = -evt.deltaY;\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\t\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.paint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3; \n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1);\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\t\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (!structureOnly && change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\t\t\t\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tvar temp = swimlane;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null &&\n\t\t\t\t\t\tthis.intersects(state, me.getGraphX(), me.getGraphY()))\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, swimlane);\n\t\t\t\t\tswimlanes.push(swimlane);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 2; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tswimlane = swimlanes[i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], null,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function(cell)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() && !this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n };\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && mxClient.IOS_VERSION <= 12 && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * for callbacks on when cells are moved or resized and\n * <mxEvent.BEGIN_UPDATE> and <mxEvent.END_UPDATE> for the capture\n * and bubble phase of the layout after any changes of the model.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getAncestorLayout(cells[i], mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\t// Checks if a layout exists to take care of the resize if the\n\t\t// parent itself is not being resized\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getAncestorLayout(cells[i], mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getAncestorLayout\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getAncestorLayout = function(cell, eventName)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\twhile (cell != null)\n\t{\n\t\tvar layout = this.getLayout(cell, eventName);\n\n\t\tif (layout != null)\n\t\t{\n\t\t\treturn layout;\n\t\t}\n\t\t\n\t\tcell = model.getParent(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.getLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.getLayout(cell) != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.getLayout(child) != null)\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leaves\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tthis.layoutCells(sorted, false);\n\tthis.layoutCells(sorted.reverse(), true);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.END_UPDATE : mxEvent.BEGIN_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Waits for the states and handlers to be updated\n\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\t// Checks if cell was removed\n\t\t\t\tif (this.graph.view.getState(state.cell) == null)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible)\n{\n\tif (this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar cell = cells[i];\n\t\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cell);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\t\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\t// Saves reference to parent state\n\t\tvar model = this.state.view.graph.model;\n\t\tvar parent = model.getParent(this.state.cell);\n\t\t\n\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t{\n\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t}\n\t\t\n\t\t// Creates a preview that can be on top of any HTML label\n\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\n\t\t// Creates the border that represents the new bounds\n\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t{\n\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\n\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t{\n\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t{\n\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\n\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\n\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t}\n\n\t\t// Prepares the handles for live preview\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.hideSizers();\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t}\n\t\t\t\n\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\tthis.edgeHandlers = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\n\t\t\t\tif (handler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\t\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\t\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\n\tif (g != null)\n\t{\n\t\tvar pts = g.points;\n\t\n\t\tif (this.bends != null && this.bends.length > 0)\n\t\t{\n\t\t\tif (pts != null)\n\t\t\t{\n\t\t\t\tif (this.points == null)\n\t\t\t\t{\n\t\t\t\t\tthis.points = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.drawPreview();\n\t\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\n\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t{\n\t\t\tthis.labelShape.bounds = bounds;\n\t\t\tthis.labelShape.redraw();\n\t\t}\n\t}\n\t\n\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints.slice();\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\t\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"schema-editor-organism\",style:({height:_vm.height})},[_c('div',{staticClass:\"schema-editor-organism__toolbar\"},[_c('button',{on:{\"click\":_vm.newEntity}},[_c('div',{staticClass:\"schema-editor-organism__toolbar__placeholder\"}),_c('label',[_vm._v(\"New Entity\")])])]),_c('div',{staticClass:\"schema-editor-organism__graphContainer lc-custom-scroll\",attrs:{\"id\":\"graphContainer\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import {AtomicDesign} from '../../../../../Frontend/Core/AtomicDesign';\r\nimport {EVENTS} from '../../../../UiResources/events';\r\nimport {uuid} from '../../../../../Frontend/Helpers/uuid';\r\nimport Strings from '../../../../UiResources/strings';\r\nimport {EDITABLE_TYPES} from '../../../../../Common/VariousTypes';\r\n\r\nexport default class SchemaEditorOrganism extends AtomicDesign {\r\n    \r\n    mxFactory;\r\n    mxClipboard;\r\n    resources = {\r\n        vertexRefs: {},\r\n        edgeRefs: {},\r\n        workspaceBlock : null,\r\n        entityBlockProperties : null,\r\n        schema:null,\r\n        allBlocks: [],\r\n        editableId:null,\r\n        schemaType:null\r\n    };\r\n    graph;\r\n    undoManager;\r\n    \r\n    cellsDeleting = false;\r\n    cellsPasting = false;\r\n\r\n    graphDefaults = {\r\n        width: 120, \r\n        height: 40,\r\n        style:'rounded=1;strokeColor=#4761a4;fillColor=#4761a4;fontColor=white;fontSize=16;' //resizable=0;\r\n    }\r\n\r\n    addEventHandlers(){\r\n        this.onGlobalEvent(EVENTS.DOCUMENT.BEFORE_SAVE,this.beforeDocumentSave);\r\n        this.onGlobalEvent(EVENTS.DOCUMENT.ENTITIES_CONNECTED,this.entitiesConnected);\r\n        this.onGlobalEvent(EVENTS.DOCUMENT.EDITABLE_SWITCHED,this.editableSwitched);\r\n        this.onGlobalEvent(EVENTS.TOOLBAR.UNDO,this.undo);\r\n        this.onGlobalEvent(EVENTS.TOOLBAR.REDO,this.redo);\r\n        this.onGlobalEvent(EVENTS.TOOLBAR.CUT,this.cut);\r\n        this.onGlobalEvent(EVENTS.TOOLBAR.COPY,this.copy);\r\n        this.onGlobalEvent(EVENTS.TOOLBAR.PASTE,this.paste);\r\n    }\r\n    \r\n    cut(){\r\n        this.mxClipboard.cut(this.graph);\r\n    }\r\n\r\n    copy(){\r\n        this.mxClipboard.copy(this.graph);\r\n    }\r\n\r\n    paste(){\r\n        this.mxClipboard.paste(this.graph);\r\n    }\r\n\r\n    undo(){\r\n        this.undoManager.undo();\r\n    }\r\n\r\n    redo(){\r\n        this.undoManager.redo();\r\n    }\r\n\r\n    \r\n    editableSwitched(editable){\r\n        if (editable.type == EDITABLE_TYPES.SCHEMA){\r\n            this.graph.getModel().clear();\r\n            this.loadDiagramFromEditable(editable);\r\n        }\r\n    }\r\n\r\n    entitiesConnected({src, dest, feildId}){\r\n        const edgeId = `${src}.${feildId}`;\r\n        const edge = this.resources.edgeRefs[edgeId];\r\n\r\n        if (edge){\r\n            this.graph.removeCells([edge],false);\r\n            this.resources.edgeRefs[edgeId] = null;\r\n        }\r\n\r\n        if (dest){\r\n            this.createRelation(this.graph, this.graph.parent,edgeId,src,dest);\r\n        }\r\n    }\r\n\r\n    newEntity(){\r\n        const newVertex = { value: \"New Entity\", x:0, y:0, id:uuid() }\r\n        const parent = this.graph.getDefaultParent();\r\n        this.createEntity(this.graph, parent, newVertex);\r\n    }\r\n\r\n    createEntity(graph, parent, vertex){\r\n        let vertexObject = graph.insertVertex(parent, vertex.id, vertex.value, vertex.x, vertex.y, this.graphDefaults.width, this.graphDefaults.height, this.graphDefaults.style);\r\n        this.resources.vertexRefs[vertex.id] = vertexObject;\r\n        return vertexObject;\r\n    }\r\n\r\n    createRelation(graph, parent, id, sourceVertexId , destVertexId){\r\n        const edgeObject = graph.insertEdge(parent, id, '', this.resources.vertexRefs[sourceVertexId], this.resources.vertexRefs[destVertexId]);\r\n        this.resources.edgeRefs[id] = edgeObject;\r\n        return edgeObject;\r\n    }\r\n\r\n    beforeDocumentSave(){\r\n        this.updateSelectedEditable();\r\n    }\r\n\r\n    updateSelectedEditable(){\r\n        let editableObj = this.vue.openedDocument.editables.find(e=>e.id == this.resources.editableId);\r\n        if (editableObj){\r\n            if (this.graph){\r\n                editableObj.schema = this.generateJsonFromDiagram();\r\n                this.actions().setOpenedDocument({result:this.vue.openedDocument});\r\n            }\r\n        }\r\n    }\r\n\r\n    setMxFactory(){\r\n        const mxgraphFactory = require('mxgraph');\r\n        this.mxFactory = new mxgraphFactory({\r\n        //   mxImageBasePath: '../../../Frontend/public/assets/mxgraph',\r\n        //   mxBasePath: 'assets/mxgraph/4.0.0'\r\n        })\r\n    }\r\n\r\n    entityClicked (sender, evt){\r\n        this.actions().setSelectedBlock(this.resources.workspaceBlock);\r\n        if(evt.state){\r\n            const block = evt.state.cell;\r\n            if (block){\r\n                this.actions().setSelectedBlock({id:block.id, properties:this.resources.entityBlockProperties});\r\n            }\r\n        }   \r\n    }\r\n\r\n    setGraphStyles(graph,container){\r\n        const {mxConstants,mxEdgeStyle,mxEvent} = this.mxFactory;\r\n\r\n        mxEvent.disableContextMenu(container);\r\n        graph.setAllowDanglingEdges(false);\r\n        graph.setGridEnabled(false);\r\n        graph.setEdgeLabelsMovable(false);\r\n        graph.setVertexLabelsMovable(false);\r\n\r\n\r\n        let style = graph.getStylesheet().getDefaultEdgeStyle();\r\n        style[mxConstants.STYLE_ROUNDED] = true;\r\n        style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\r\n        style[mxConstants.STYLE_STARTARROW] = mxConstants.ARROW_DIAMOND_THIN;\r\n        style[mxConstants.STYLE_STARTSIZE] = 20;\r\n        style[mxConstants.STYLE_ENDARROW] = \"none\";\r\n        style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[mxConstants.STYLE_CURVED] = '1';\r\n    }\r\n\r\n    setGraphEvents(graph){\r\n        const {mxEvent,mxRubberband,mxKeyHandler,mxUndoManager,mxClipboard} = this.mxFactory;\r\n        this.resources.rb = new mxRubberband(graph);\r\n        this.resources.keyHandler = new mxKeyHandler(graph);\r\n        \r\n        const dummyEvent = ()=>{};\r\n\r\n        const genericAddRemoveCellArray = (sender, evt) =>{\r\n            if(evt?.properties?.cells){\r\n                if(evt.properties.cells.length > 0){\r\n                    const cell = evt.properties.cells[0];\r\n                    if (cell.vertex){\r\n                        if(this.cellsDeleting){\r\n                            this.actions().setSelectedBlock(this.resources.workspaceBlock);\r\n                            delete this.vue.selectedItems.editable.properties[cell.id];\r\n                        }   \r\n                        if (!this.cellsPasting){\r\n                            this.updateCustomDataTypes();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const genericAddRemoveCell = (sender, evt) =>{\r\n            if(evt?.properties?.cell){\r\n                const cell = evt?.properties?.cell;\r\n                if (cell.vertex){\r\n                    if(this.cellsDeleting){\r\n                        this.actions().setSelectedBlock(this.resources.workspaceBlock);\r\n                        delete this.vue.selec\r\n                        this.vue.selectedItems.editable.properties[cell.id];\r\n                    }\r\n                    if (!this.cellsPasting){\r\n                        this.updateCustomDataTypes();\r\n                    }                   \r\n                }\r\n            }\r\n        };\r\n\r\n        this.resources.keyHandler.bindKey(46, () =>{\r\n          if (graph.isEnabled())\r\n          {\r\n            this.cellsDeleting = true;\r\n            graph.removeCells();\r\n            this.cellsDeleting = false;\r\n          }\r\n        });\r\n\r\n        graph.addMouseListener({ mouseDown: dummyEvent, mouseMove: dummyEvent, mouseUp: (sender, evt) => this.entityClicked(sender, evt)});\r\n        graph.addListener(mxEvent.CELLS_ADDED, genericAddRemoveCellArray);\r\n        graph.addListener(mxEvent.REMOVE_CELLS, genericAddRemoveCellArray);       \r\n        graph.addListener(mxEvent.LABEL_CHANGED, genericAddRemoveCell);\r\n\r\n        this.undoManager = new mxUndoManager();\r\n        \r\n        var listener = (sender, evt) =>{\r\n          this.undoManager.undoableEditHappened(evt.getProperty('edit'));\r\n        };\r\n\r\n        graph.getModel()?.addListener(mxEvent.UNDO, listener);\r\n        graph.getView()?.addListener(mxEvent.UNDO, listener)\r\n        \r\n\r\n        this.mxClipboard = mxClipboard;\r\n\r\n        mxClipboard.paste = (graph) =>\r\n        {\r\n          if (!mxClipboard.isEmpty())\r\n          {\r\n            var cells = graph.getImportableCells(mxClipboard.getCells());\r\n            var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\r\n            var parent = graph.getDefaultParent();\r\n            this.cellsPasting = true;\r\n            graph.model.beginUpdate();\r\n            try\r\n            {\r\n              for (var i = 0; i < cells.length; i++)\r\n              {\r\n                var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ? mxClipboard.parents[i] : parent;\r\n                const newId = uuid()\r\n                cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\r\n                cells[i].setId(newId);\r\n                this.resources.vertexRefs[newId] = cells[i];\r\n              }\r\n            }\r\n            finally\r\n            {\r\n              graph.model.endUpdate();\r\n            }\r\n        \r\n            this.cellsPasting = false;\r\n            this.updateCustomDataTypes();\r\n            // Increments the counter and selects the inserted cells\r\n            mxClipboard.insertCount++;\r\n            graph.setSelectionCells(cells);\r\n          }\r\n        };\r\n\r\n    }\r\n\r\n    async initialize(){\r\n        const params = {staticCache:true, localStorage:true};\r\n        const {result,error} = await this.backend(params).getBlocks();\r\n        if (!error){    \r\n            this.resources.allBlocks = result;       \r\n            this.initMxGraph();\r\n        }else {\r\n            this.msgbox(Strings.ERROR_MESSAGES.MESSAGE_SCHEMA_BLOCKS,this.MSGBOX_TYPE.OK,Strings.ERROR_MESSAGES.TITLE_MESSAGE_SCHEMA_BLOCKS);\r\n        }\r\n\r\n    }\r\n\r\n    initMxGraph(){\r\n        const container = document.getElementById('graphContainer');\r\n\r\n        const {mxClient,mxUtils,mxGraph} = this.mxFactory;\r\n\r\n        if (!mxClient.isBrowserSupported())\r\n        {\r\n            mxUtils.error('Browser is not supported!', 200, false);\r\n        }\r\n        else\r\n        {\r\n            this.graph = new mxGraph(container);\r\n            this.setGraphStyles(this.graph,container);\r\n            this.setGraphEvents(this.graph);\r\n            const finalWidth = Math.floor(container.getBoundingClientRect().width);\r\n            container.style.width = `${finalWidth - 15 }px`;\r\n        }\r\n    }\r\n\r\n    loadDiagramFromEditable(editable){   \r\n\r\n        if(editable){\r\n            this.resources.schema = editable.schema || \"\";\r\n            this.resources.editableId = editable.id;\r\n            this.resources.schemaType = editable.properties['0'].schemaType;\r\n        \r\n            const parent = this.graph.getDefaultParent();\r\n            const {edges, vertices} = this.resources.schema ? {...this.resources.schema} : {};\r\n            \r\n            this.graph.getModel().beginUpdate();\r\n            \r\n            try\r\n            {\r\n                this.resources.vertexRefs = {};\r\n                this.resources.edgeRefs = {};\r\n\r\n                if(vertices){\r\n                    vertices.forEach(v=>{ this.createEntity(this.graph, parent, v); });\r\n                    this.updateCustomDataTypes();\r\n                }\r\n                if (edges){\r\n                    edges.forEach(e=>{ this.createRelation(this.graph,parent,e.id, e.source, e.target) });\r\n                }\r\n            }\r\n            finally\r\n            {\r\n                this.graph.getModel().endUpdate();\r\n            }\r\n\r\n            this.setDefaultBlock();\r\n            this.undoManager.clear();\r\n        }\r\n\r\n    }\r\n\r\n    setDefaultBlock(){\r\n        const workspaceBlockName = `$-schema-${this.resources.schemaType}`;\r\n        const workspaceBlock = this.resources.allBlocks.find(block=>block.name == workspaceBlockName);\r\n        this.resources.workspaceBlock = {\r\n            id :0,\r\n            properties: workspaceBlock?.properties || {}\r\n        };\r\n\r\n        const entityBlockName = \"entity\";\r\n        const entityBlockProperties = this.resources.allBlocks.find(block=>block.name == entityBlockName)?.properties || {};\r\n        if (entityBlockProperties?.fields?.typeData){\r\n            entityBlockProperties.fields.typeData.schemaType = this.resources.schemaType;\r\n        }\r\n        this.resources.entityBlockProperties = entityBlockProperties;\r\n\r\n        this.actions().setSelectedBlock(this.resources.workspaceBlock);\r\n    }\r\n\r\n    generateJsonFromDiagram (){\r\n        const parent = this.graph.getDefaultParent();\r\n    \r\n        const childVertices = this.graph.getChildVertices(parent);\r\n        const childEdges = this.graph.getChildEdges(parent);\r\n\r\n        let vertices = childVertices.map(v=> { return { id: v.id, value: v.value, x: v.geometry.x, y: v.geometry.y } });\r\n        let edges = childEdges.map(e=> {  return { id: e.id, source: e.source.id, target: e.target.id } });\r\n\r\n        const outObj = { vertices,edges}\r\n\r\n        return outObj;\r\n    }\r\n\r\n\r\n    updateCustomDataTypes(){\r\n        if (this.graph){\r\n            const parent = this.graph.getDefaultParent();\r\n            const childVertices = this.graph.getChildVertices(parent);\r\n            let customDataTypes = childVertices.map(v=> { return { id: v.id, caption: v.value, custom:true } });\r\n            this.actions().setCustomDataTypes(customDataTypes);\r\n        }\r\n    }\r\n    \r\n    releaseResources(){\r\n        this.resources?.keyHandler?.destroy();\r\n        this.resources = {\r\n            vertexRefs: {},\r\n            edgeRefs: {},\r\n            workspaceBlock: null,\r\n            entityBlockProperties : null\r\n        };\r\n    }\r\n    \r\n    resetStore(){\r\n        this.actions().setCustomDataTypes([]);\r\n        this.actions().setSelectedBlock(null);\r\n    }\r\n}","<template>\r\n  <div class=\"schema-editor-organism\" :style=\"{height:height}\">\r\n    <div class=\"schema-editor-organism__toolbar\">\r\n      <button @click=\"newEntity\">\r\n        <div class=\"schema-editor-organism__toolbar__placeholder\"></div>\r\n        <label>New Entity</label>\r\n      </button>\r\n      \r\n    </div>\r\n\t\t<div id=\"graphContainer\" class=\"schema-editor-organism__graphContainer lc-custom-scroll\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SchemaEditorOrganism from './SchemaEditorOrganism.hook';\r\nconst hook = new SchemaEditorOrganism();\r\nhook.setBackendNamespace(\"Pages/Editor/EditorPage\").setElementName(\"SchemaEditorOrganism\");\r\n\r\nexport default {\r\n  name: 'SchemaEditorOrganism',\r\n  beforeCreate() { \r\n    hook.hook(this); \r\n    hook.addEventHandlers();\r\n    hook.setMxFactory()  \r\n  },\r\n  beforeDestroy() { \r\n    hook.unsubscribeGlobalEvents();  \r\n    hook.updateSelectedEditable(); \r\n    hook.resetStore(); \r\n    hook.releaseResources();\r\n  },\r\n  components: {},\r\n  methods: hook.methods(\"newEntity\"),\r\n  props: { },\r\n  data() {\r\n      return { \r\n        schema:\"\",\r\n        editableId:-1,\r\n        schemaType:0\r\n      }\r\n  },\r\n  async mounted(){\r\n    await hook.initialize();\r\n    hook.loadDiagramFromEditable(this.selectedItems?.editable);\r\n  },\r\n  computed: {\r\n    panels(){\r\n      return this.openedDocument.selectedResources.panels;\r\n    }, \r\n    height(){\r\n        const bottomPanel = this.compileErrors;\r\n\r\n        if (bottomPanel){\r\n          return \"calc(100% - 150px)\";\r\n        }\r\n\r\n        return \"100%\";\r\n    },\r\n    ...hook.getters(\"selectedItems\",\"openedDocument\",\"customDataTypes\",\"compileErrors\")\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n.schema-editor-organism {\r\n  display: flex;\r\n  width: 100%;\r\n  background:url('../../../../../Frontend/public/assets/grid.fw.png');\r\n\r\n  &__toolbar {\r\n    padding-top:20px;\r\n    background-color:rgb(51, 51, 51);\r\n    width:128px;\r\n\r\n    &__placeholder {\r\n      background: #5b80a5;\r\n      height:25px;\r\n      width:7px;\r\n      margin-left:-10px;\r\n      margin-top: 2px;\r\n    }\r\n\r\n    button:hover { \r\n      opacity:0.5;\r\n    }\r\n\r\n    button {\r\n      margin-left:5px;\r\n      background-color: Transparent;\r\n      border: none;\r\n      transition: 0.2s;\r\n      cursor: pointer;\r\n      > * {\r\n        cursor: pointer;\r\n      }\r\n\r\n      display: flex;\r\n      img {\r\n        height:25px;\r\n      }\r\n\r\n      label{\r\n        padding-top:5px;\r\n        padding-left:15px;\r\n        font-size:16px;\r\n        color: white;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  &__graphContainer {\r\n    overflow:auto;\r\n    width:100%;\r\n    height: 100%;\r\n    cursor:default;\r\n  }\r\n}\r\n\r\n</style>\r\n","import mod from \"-!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchemaEditorOrganism.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchemaEditorOrganism.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SchemaEditorOrganism.vue?vue&type=template&id=c3899e9c&scoped=true&\"\nimport script from \"./SchemaEditorOrganism.vue?vue&type=script&lang=js&\"\nexport * from \"./SchemaEditorOrganism.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SchemaEditorOrganism.vue?vue&type=style&index=0&id=c3899e9c&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"c3899e9c\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchemaEditorOrganism.vue?vue&type=style&index=0&id=c3899e9c&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchemaEditorOrganism.vue?vue&type=style&index=0&id=c3899e9c&scoped=true&lang=scss&\""],"sourceRoot":""}